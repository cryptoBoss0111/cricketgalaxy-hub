
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://swiftskcxeoyomwwmkms.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN3aWZ0c2tjeGVveW9td3dta21zIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIzNjc1MDIsImV4cCI6MjA1Nzk0MzUwMn0.54r22gXPj3NoQJCTfXcA-bBBGk9d5d_1D2ZzvEUZXY0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    fetch: (url: RequestInfo | URL, options?: RequestInit) => fetch(url, options),
  },
});

// Check if current user is an admin
export const isAdminUser = async (): Promise<boolean> => {
  try {
    // First check if we have a session
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error("Session error:", sessionError.message);
      return false;
    }
    
    if (sessionData.session) {
      console.log("Found active session, checking admin status for user:", sessionData.session.user.id);
      
      // If we have a session, check if the user ID is in the admins table
      const currentUserId = sessionData.session.user.id;
      const { data: adminData, error: adminError } = await supabase
        .from('admins')
        .select('id')
        .eq('id', currentUserId)
        .maybeSingle();
        
      if (adminError) {
        console.error("Admin query error:", adminError.message);
        return false;
      }
      
      if (adminData) {
        console.log("User confirmed as admin in database");
        // Store admin info for faster checks
        localStorage.setItem('adminToken', 'authenticated');
        localStorage.setItem('adminUser', JSON.stringify({ 
          id: currentUserId,
          role: 'admin'
        }));
        return true;
      } else {
        console.log("User is not an admin");
        // Clear any stale admin tokens
        localStorage.removeItem('adminToken');
        localStorage.removeItem('adminUser');
        return false;
      }
    }
    
    // No session, check for legacy admin token
    console.log("No active session, checking for legacy admin token");
    const adminToken = localStorage.getItem('adminToken');
    if (adminToken === 'authenticated') {
      try {
        const adminUserStr = localStorage.getItem('adminUser');
        if (!adminUserStr) {
          console.log("Admin token found but no admin user data");
          localStorage.removeItem('adminToken');
          return false;
        }
        
        const adminUser = JSON.parse(adminUserStr);
        if (!adminUser.id) {
          console.log("Admin user data invalid, missing ID");
          localStorage.removeItem('adminToken');
          localStorage.removeItem('adminUser');
          return false;
        }
        
        // Verify the admin ID is still valid
        const { data: adminCheck, error: verifyError } = await supabase
          .from('admins')
          .select('id')
          .eq('id', adminUser.id)
          .maybeSingle();
          
        if (verifyError) {
          console.error("Error verifying admin ID:", verifyError);
          return false;
        }
        
        if (adminCheck) {
          console.log("Legacy admin token verified");
          return true;
        } else {
          console.log("Legacy admin token invalid, clearing");
          localStorage.removeItem('adminToken');
          localStorage.removeItem('adminUser');
          return false;
        }
      } catch (error) {
        console.error("Error parsing admin user data:", error);
        localStorage.removeItem('adminToken');
        localStorage.removeItem('adminUser');
        return false;
      }
    }
    
    console.log("No admin token found");
    return false;
  } catch (error) {
    console.error("Error checking admin status:", error);
    return false;
  }
};

// Generate a unique filename for uploads
export const generateUniqueFileName = (fileName: string) => {
  const timestamp = new Date().getTime();
  const randomString = Math.random().toString(36).substring(2, 12);
  const extension = fileName.split('.').pop();
  return `${timestamp}-${randomString}.${extension}`;
};

// Upload file to storage
export const uploadImageToStorage = async (file: File, bucketName = 'article_images') => {
  if (!file) {
    throw new Error('No file provided');
  }
  
  const uniqueFileName = generateUniqueFileName(file.name);
  
  // Check for active session
  const { data: sessionData } = await supabase.auth.getSession();
  const isAuthenticated = !!sessionData.session;
  
  if (!isAuthenticated && bucketName !== 'public') {
    // For non-public buckets, ensure we're authenticated
    console.error("Authentication required for uploads");
    throw new Error("You must be logged in to upload files");
  }
  
  try {
    console.log(`Uploading file to ${bucketName}/${uniqueFileName}`);
    
    const { data, error } = await supabase
      .storage
      .from(bucketName)
      .upload(uniqueFileName, file, {
        cacheControl: '3600',
        upsert: false
      });
    
    if (error) {
      console.error("Storage upload error:", error);
      throw error;
    }
    
    if (!data) {
      throw new Error("Upload failed with no error details");
    }
    
    // Get public URL
    const { data: { publicUrl } } = supabase
      .storage
      .from(bucketName)
      .getPublicUrl(uniqueFileName);
    
    return publicUrl;
  } catch (error) {
    console.error("Error uploading image:", error);
    throw error;
  }
};

// Get published articles for the public site
export const getPublishedArticles = async (category?: string, limit = 10) => {
  let query = supabase
    .from('articles')
    .select('*')
    .eq('published', true)
    .order('published_at', { ascending: false })
    .limit(limit);
  
  if (category && category !== 'all') {
    query = query.eq('category', category);
  }
  
  const { data, error } = await query;
  
  if (error) {
    console.error("Error fetching published articles:", error);
    throw error;
  }
  
  return data || [];
};

// Get a specific article by ID (for public viewing)
export const getArticleById = async (id: string) => {
  const { data, error } = await supabase
    .from('articles')
    .select('*')
    .eq('id', id)
    .single();
  
  if (error) {
    console.error("Error fetching article:", error);
    throw error;
  }
  
  return data;
};
